//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
namespace PreyPreadtor
{
	using System;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Linq;
	using System.Text;

	/// <summary>
	/// агент
	/// </summary>
	public class Agent
	{
        public static Random rand = new Random();

		/// <summary>
		/// горизонтальная координата на плоскоти
		/// </summary>
		public int x;

		/// <summary>
		/// вертикальная координата на плоскоти
		/// </summary>
		public int y;

		/// <summary>
		/// номер итерации рождения
		/// </summary>
		protected int birth;

		/// <summary>
		/// сытость агента
		/// </summary>
		public int satiety;

		/// <summary>
		/// среда в которой обитает агент
		/// </summary>
		public Environment environment;

		/// <summary>
		/// цвет агента на полотне
		/// </summary>
		public Color color;

		/// <summary>
		/// перемещение в произвольном направлении
		/// </summary>
		/// <param name="width">ширина плоскости</param>
		/// <param name="height">высота плоскости</param>
		public void MoveRand()
		{
            int dx = rand.Next(-1, 2);
            int dy = rand.Next(-1, 2);

            if (((x + dx) < environment.width) && ((x + dx) >= 0))
            {
                x += dx;
                satiety--;
            }

            if (((y + dy) < environment.height) && ((y + dy) >= 0))
            {
                y += dy;
                satiety--;
            }

		}

		/// <summary>
		/// агент съедает агента Target
		/// </summary>
		protected void Eat(Agent Target)
		{
            satiety += (Target.satiety - (int)(Target.satiety*0.2)); //переход сытости

            if (Target is Grass)
                Target.satiety = 0; //трава съедается но не уничтожается
            else
                environment.agents.Remove(Target); //уничтожение цели
		}

		/// <summary>
		/// перемещение в заданную позицию
		/// </summary>
		public void MoveTo(int x, int y)
		{
            this.x = x;
            this.y = y;
        }

		/// <param name="environment">среда обитания агента</param>
		public Agent(Environment environment, int satiety, Color color)
		{
            this.environment = environment;

            x = rand.Next(environment.width);
            y = rand.Next(environment.height);
           
            birth = environment.timer;

            this.satiety = satiety;
            this.color = color;
		}

		/// <summary>
		/// возвращает список агентов в заданном радиусе
		/// </summary>
		public virtual List<Agent> nearAgents(double radius)
		{
            List<Agent> result = new List<Agent>();

			foreach(var ag in environment.agents)
            {
                if (Math.Sqrt(Math.Pow(x - ag.x, 2) + Math.Pow(y - ag.y, 2)) <= radius && ag!=this)
                {
                    result.Add(ag);
                }
            }

            return result;
		}

		public Agent()
		{
            var rand = new Random();

            environment = new Environment();

            x = rand.Next(environment.width);
            y = rand.Next(environment.height);
            birth = environment.timer;
            
            satiety = rand.Next(5,10);

            color = Color.Black;
		}

	}
}

